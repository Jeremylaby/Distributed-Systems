//
// Copyright (c) ZeroC, Inc. All rights reserved.
//
//
// Ice version 3.7.10
//
// <auto-generated>
//
// Generated from file `SmartHome.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package SmartHome;

public class CameraSettings implements java.lang.Cloneable,
                                       java.io.Serializable
{
    public int minX;

    public int maxX;

    public int minY;

    public int maxY;

    public ZoomLevel minZoom;

    public ZoomLevel maxZoom;

    public CameraSettings()
    {
        this.minZoom = ZoomLevel.ZoomX1;
        this.maxZoom = ZoomLevel.ZoomX1;
    }

    public CameraSettings(int minX, int maxX, int minY, int maxY, ZoomLevel minZoom, ZoomLevel maxZoom)
    {
        this.minX = minX;
        this.maxX = maxX;
        this.minY = minY;
        this.maxY = maxY;
        this.minZoom = minZoom;
        this.maxZoom = maxZoom;
    }

    public boolean equals(java.lang.Object rhs)
    {
        if(this == rhs)
        {
            return true;
        }
        CameraSettings r = null;
        if(rhs instanceof CameraSettings)
        {
            r = (CameraSettings)rhs;
        }

        if(r != null)
        {
            if(this.minX != r.minX)
            {
                return false;
            }
            if(this.maxX != r.maxX)
            {
                return false;
            }
            if(this.minY != r.minY)
            {
                return false;
            }
            if(this.maxY != r.maxY)
            {
                return false;
            }
            if(this.minZoom != r.minZoom)
            {
                if(this.minZoom == null || r.minZoom == null || !this.minZoom.equals(r.minZoom))
                {
                    return false;
                }
            }
            if(this.maxZoom != r.maxZoom)
            {
                if(this.maxZoom == null || r.maxZoom == null || !this.maxZoom.equals(r.maxZoom))
                {
                    return false;
                }
            }

            return true;
        }

        return false;
    }

    public int hashCode()
    {
        int h_ = 5381;
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, "::SmartHome::CameraSettings");
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, minX);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, maxX);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, minY);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, maxY);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, minZoom);
        h_ = com.zeroc.IceInternal.HashUtil.hashAdd(h_, maxZoom);
        return h_;
    }

    public CameraSettings clone()
    {
        CameraSettings c = null;
        try
        {
            c = (CameraSettings)super.clone();
        }
        catch(CloneNotSupportedException ex)
        {
            assert false; // impossible
        }
        return c;
    }

    public void ice_writeMembers(com.zeroc.Ice.OutputStream ostr)
    {
        ostr.writeInt(this.minX);
        ostr.writeInt(this.maxX);
        ostr.writeInt(this.minY);
        ostr.writeInt(this.maxY);
        ZoomLevel.ice_write(ostr, this.minZoom);
        ZoomLevel.ice_write(ostr, this.maxZoom);
    }

    public void ice_readMembers(com.zeroc.Ice.InputStream istr)
    {
        this.minX = istr.readInt();
        this.maxX = istr.readInt();
        this.minY = istr.readInt();
        this.maxY = istr.readInt();
        this.minZoom = ZoomLevel.ice_read(istr);
        this.maxZoom = ZoomLevel.ice_read(istr);
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, CameraSettings v)
    {
        if(v == null)
        {
            _nullMarshalValue.ice_writeMembers(ostr);
        }
        else
        {
            v.ice_writeMembers(ostr);
        }
    }

    static public CameraSettings ice_read(com.zeroc.Ice.InputStream istr)
    {
        CameraSettings v = new CameraSettings();
        v.ice_readMembers(istr);
        return v;
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, java.util.Optional<CameraSettings> v)
    {
        if(v != null && v.isPresent())
        {
            ice_write(ostr, tag, v.get());
        }
    }

    static public void ice_write(com.zeroc.Ice.OutputStream ostr, int tag, CameraSettings v)
    {
        if(ostr.writeOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            int pos = ostr.startSize();
            ice_write(ostr, v);
            ostr.endSize(pos);
        }
    }

    static public java.util.Optional<CameraSettings> ice_read(com.zeroc.Ice.InputStream istr, int tag)
    {
        if(istr.readOptional(tag, com.zeroc.Ice.OptionalFormat.FSize))
        {
            istr.skip(4);
            return java.util.Optional.of(CameraSettings.ice_read(istr));
        }
        else
        {
            return java.util.Optional.empty();
        }
    }

    private static final CameraSettings _nullMarshalValue = new CameraSettings();

    /** @hidden */
    public static final long serialVersionUID = -1542659457L;
}
